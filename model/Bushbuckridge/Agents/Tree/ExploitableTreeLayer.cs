using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using Mars.Components.Agents;
using Mars.Components.Environments;
using Mars.Components.Services;
using Mars.Interfaces.Layer;
using Mars.Interfaces.Layer.Initialization;

namespace Bushbuckridge.Agents.Tree
{
    public class ExploitableTreeLayer : ISteppedActiveLayer
    {
        private const int TREE_COUNT = 100;
        private ConcurrentDictionary<Guid, ExploitableTree> _agents;
        private GeoGridEnvironment<GeoAgent<ExploitableTree>> _environment;
        private long CurrentTick { get; set; }

        public bool InitLayer(TInitData layerInitData, RegisterAgent registerAgentHandle,
            UnregisterAgent unregisterAgentHandle)
        {
            _environment =
                new GeoGridEnvironment<GeoAgent<ExploitableTree>>(-24.8239, -24.8690, 31.1944, 31.2436, 1000);

            var agentInitConfig = layerInitData.AgentInitConfigs.FirstOrDefault();
            _agents = AgentManager.GetAgentsByAgentInitConfig<ExploitableTree>(agentInitConfig, registerAgentHandle,
                unregisterAgentHandle,
                new List<ILayer>(), _environment);
            
            Console.WriteLine("[ExploitableTreeLayer]: Created Agents: " + _agents.Count);
            
            return true;
        }

        public long GetCurrentTick()
        {
            return CurrentTick;
        }

        public void SetCurrentTick(long currentTick)
        {
            CurrentTick = currentTick;
        }

        public void Tick()
        {
            // do nothing
        }

        public void PreTick()
        {
            //do nothing
        }

        public void PostTick()
        {
            //do nothing
        }

        public List<ExploitableTree> Explore(double lat, double lon, double radius, int maxResults = -1)
        {
            var agents = _environment.Explore(lat, lon, radius, maxResults);
            return agents.Select(agent => agent.AgentReference).ToList();
        }
    }
}
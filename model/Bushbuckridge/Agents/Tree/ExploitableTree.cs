using System;
using Mars.Components.Agents;
using Mars.Components.Environments;
using Mars.Interfaces.Agent;
using Mars.Interfaces.Environment.GeoCommon;
using Mars.Interfaces.Layer;
using Mars.Interfaces.LIFECapabilities;

namespace Bushbuckridge.Agents.Tree
{
    public interface IExploitableTree : IGeoCoordinate
    {
        float DeadMass { get; }

        float AliveMass { get; }

        float TakeDeadWoodMass(float desiredAmount);

        float TakeAliveWoodMass(float desiredAmount);
    }

    public class ExploitableTree : GeoAgent<ExploitableTree>, IExploitableTree
    {
        public override ExploitableTree AgentReference => this;

        public float AliveMass { get; private set; } // in AGB (Above Ground Biomass)
        public float DeadMass { get; private set; }

        [PublishForMappingInMars]
        public ExploitableTree(ExploitableTreeLayer layer, RegisterAgent register, UnregisterAgent unregister,
            GeoGridEnvironment<GeoAgent<ExploitableTree>> env, Guid id, double lat, double lon) :
            base(layer, register, unregister, env, new GeoCoordinate(lat, lon), id.ToByteArray())
        {
            AliveMass = 500f;
            DeadMass = 50f;
        }

        protected override IInteraction Reason()
        {
            return new GrowInteraction(this);
        }

        public void Grow()
        {
            //TODO bessere Wachstumsformel?
            AliveMass *= 1.01f;
            DeadMass += AliveMass * 0.001f;
        }

        //TODO 3 damage classes:
        //N DeadMass
        //M AliveMass: secondary or small branches (bis 50%) 
        //X AliveMass: coppicing

        public float TakeDeadWoodMass(float desiredAmount)
        {
            var takeDeadWoodMass = DeadMass > desiredAmount ? desiredAmount : DeadMass;
            DeadMass -= takeDeadWoodMass;
            return takeDeadWoodMass;
        }

        public float TakeAliveWoodMass(float desiredAmount)
        {
            var takeLivingWoodMass = AliveMass > desiredAmount ? desiredAmount : AliveMass;
            AliveMass -= takeLivingWoodMass;
            return takeLivingWoodMass;
        }

        public bool Equals(IGeoCoordinate other)
        {
            return other.Latitude.Equals(Latitude) && other.Longitude.Equals(Longitude);
        }

        public string Status()
        {
            return string.Format("{0} AliveMass: {1} DeadMass: {2}", ID, AliveMass, DeadMass);
        }
    }

    internal class GrowInteraction : IInteraction
    {
        private readonly ExploitableTree _tree;

        internal GrowInteraction(ExploitableTree tree)
        {
            _tree = tree;
        }

        public void Execute()
        {
            _tree.Grow();
        }
    }
}
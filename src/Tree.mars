model KruegerNationalPark

use Mars 

raster-layer Temperature as temperature
raster-layer Precipitation as precipitation

layer SavannaLayer

enum TreeStateType { Seedling Juvenile Adult Death }

enum GenderType { Male Female }

enum DamageType { No Light Moderate Heavy Extreme }

class MyConstants {
	static def CarbonDensity() => return 3.51

	static def MaxHeight() => return 15
}

agent Tree on SavannaLayer {
	var IsAlive : bool
	
	external var TreeType : string
	external var StemDiameter : real

	observe var HasLeaves : bool

	observe var LivingWoodMass : real
	observe var DeadwoodMass : real
	
	var Growthrate : real = 0.5
	var SeedlingGrowthrate : real = 0.5
	var ResproutGrowthrate : real = 0.5

	observe var MyDamageType : DamageType = DamageType.No
	var MyTreeStateType : TreeStateType = TreeStateType.Seedling;

	var IsMultiStem : bool
	var WaterHousehold : real
	var ResproutCapacity : real

	def TreePosition() => return #(xcor, ycor)

	passive TakeDeadWoodMass(mass : real) {
		var result : real if (mass < DeadwoodMass) {
			result = mass
		} else {
			result = DeadwoodMass
		}
		DeadwoodMass = DeadwoodMass - result
		return result
	}

	passive TakeLivingWoodMass(mass : real) {
		// TODO: damage class?
		var result : real
		if (mass < LivingWoodMass) 
			result = mass
		else 
			result = LivingWoodMass
		LivingWoodMass = LivingWoodMass - result
		return result
	}

	def UpdatePhotosyntheseActive() {
		if (Time::Month(simtime) === 10 and Time::Day(simtime) === 15)
			HasLeaves = true
		else if (Time::Month(simtime) === 6 and Time::Day(simtime) === 15)
			HasLeaves = false
	}

	def Grow(growthrate : real) {
		//TODO UmwelteinflÃ¼sse verkleinern growthrate
		var mytemp = temperature.GetNumberValue(ycor, xcor)	
		var myPrec = precipitation.GetNumberValue(ycor, xcor)	
		
		StemDiameter =  StemDiameter + StemDiameter * growthrate
	}

	def UpdateTreeStateType() {
		if (StemDiameter < 10) {
			MyTreeStateType = TreeStateType.Juvenile;
		} else {
			MyTreeStateType = TreeStateType.Adult;
		}
	}

	def Reduce(growthrate : real, min : integer, max : integer) {
		return growthrate * (min + random(max - min)) / 100 
	}

	def Die() {
		MyTreeStateType = TreeStateType.Death
		IsAlive = false
	}

	tick {
		UpdateTreeStateType()
		UpdatePhotosyntheseActive()
		
//		switch(MyTreeStateType) {
//			case Seedling: { Seedling() } 
//			case Juvenile: { Juvenile() } 
//			case Adult: { Adult() } 
//		}
		if (TreeStateType.Seedling === MyTreeStateType) {
			Seedling()
		} else if (TreeStateType.Juvenile === MyTreeStateType) {
			Juvenile()
		} else if (TreeStateType.Adult === MyTreeStateType) {
			Adult()
		}
		MyDamageType = DamageType.No	 
				 	
		println simtime + " " + StemDiameter 
	}

	def Seedling() {
		if (MyDamageType != DamageType.No) {
			Die()
		} else if (HasLeaves) {
			Grow(SeedlingGrowthrate)
		} 
	}

	def Juvenile() {
		if (HasLeaves) {
			if (MyDamageType != DamageType.No) {
				Grow(ResproutGrowthrate)
			} else {
				Grow(Growthrate)
			}
		} 
	}

	def Adult() {
		if (HasLeaves) {
			if (MyDamageType === DamageType.No) {
				Grow(Growthrate)
			} else if (MyDamageType === DamageType.Light) {
				Grow(Reduce(Growthrate, 90, 100))
			} else if (MyDamageType === DamageType.Moderate) {
				Grow(Reduce(Growthrate, 70, 90))
			} else if (MyDamageType === DamageType.Heavy) {
				Grow(Reduce(Growthrate, 40, 70))
			} else if (MyDamageType === DamageType.Extreme) {
				Grow(ResproutGrowthrate)
			}
		} 
	}
}
